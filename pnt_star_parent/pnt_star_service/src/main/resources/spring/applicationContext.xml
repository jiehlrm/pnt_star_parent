<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	 							   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	 							   http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
	                              http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


	<description>Spring公共配置 </description>

	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath:spring/application.properties</value>
			</list>
		</property>
	</bean>
	<!-- 系统初始化必须先加载的bean开始 位置不要动 -->
	<bean lazy-init="false" id="springContext" class="com.tydic.pntstar.util.SpringBeanUtil" />
	<!-- 加载mybatis框架 -->
	<bean lazy-init="false" id="mybatisInitFactory" class="com.tydic.pntstar.frame.MybatisInitFactory">
	</bean>
	<!-- 根据配置文件，加载redis客户端
	 * 使用方法如下：<br/>
	 * IRedisClient redisClient=(IRedisClient)SpringBeanUtil.getBean("redisClient");<br/>
	 * redisClient.get(key);<br/>
	 * redisClient.set(key,value);<br/>
	 -->
	<bean lazy-init="false" id="myRedisFactory" class="com.tydic.pntstar.util.redis.RedisFactory"
		init-method="init">
	</bean>
	
	<bean lazy-init="false" id="sysdataLoad" class="com.tydic.pntstar.util.SysdataLoad" depends-on="mybatisInitFactory">
	</bean>
    <!-- 系统初始化必须先加载的bean结束  位置不要动 -->
	
	
	
	
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com.tydic.pntstar" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="10" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="testWhileIdle" value="true" />

		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

		<property name="defaultAutoCommit" value="true" />

		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="select 1 from dual" />
		<property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<ref bean="logFilter" />
			</list>
		</property>
	</bean>

	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<!-- 打印可执行的SQL -->
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>


	<!-- 数据事务配置 -->
	<bean id="transactionManager"
		class="com.tydic.pntstar.dao.CTGDataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<bean id="dbdao" class="com.tydic.pntstar.dao.CommonDBDaoImpl">
		<property name="jct">
			<ref bean="jdbcTemplate" />
		</property>
	</bean>
	<bean id="flowService" class="com.tydic.pntstar.service.impl.flow.FlowServiceImpl"/>
	<import resource="classpath:dubbo/*.xml" />
	
	<import resource="classpath:spring/applicationContext-task.xml" />

</beans>